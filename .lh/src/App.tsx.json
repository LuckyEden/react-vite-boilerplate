{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1702322894467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702322911341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import { Routes, Route } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+\n+\n+function App() {\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    if(route === undefined) return null;\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element  />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702322917274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import { Routes, Route } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+\n+\n+function App() {\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    if(route === undefined) return null;\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702322924314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import { Route, Routes } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+\n+\n+function App() {\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    if(route === undefined) return null;\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702323430567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import { Route, Routes } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+import Document from \"./components/Document\";\n+\n+\n+function App() {\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    if(route === undefined) return null;\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Document />\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702323452524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import { Route, Routes } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+import Document from \"./components/Document\";\n+\n+\n+function App() {\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    if(route === undefined) return null;\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Document />\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702323489356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import { Route, Routes, useLocation } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+import Document from \"./components/Document\";\n+\n+\n+function App() {\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    const location = useLocation();\n+    \n+    if(route === undefined) return null;\n+    if(route.path === location.pathname){\n+      console.log(\"equal path\");\n+      \n+    }\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Document />\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702323585257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import { Route, Routes, useLocation } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+import Document from \"./components/Document\";\n+\n+\n+function App() {\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    const location = useLocation();\n+    \n+    if(route === undefined) return null;\n+    if(route.path === location.pathname){\n+      console.log(\"equal path: \" + route.path + \"_\" + location.pathname);\n+      \n+    }\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Document />\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702323591256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+import { Route, Routes, useLocation } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+import Document from \"./components/Document\";\n+\n+\n+function App() {\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    const location = useLocation();\n+    \n+    if(route === undefined) return null;\n+    if(route.path === location.pathname){\n+      \n+    }\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Document />\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702324044427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,44 @@\n+import { Route, Routes, useLocation } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+import Document from \"./components/Document\";\n+\n+\n+function App() {\n+\n+  \n+\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    const location = useLocation();\n+    \n+    if(route === undefined) return null;\n+    if(route.path === location.pathname){\n+      \n+    }\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Document />\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702324160887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+import { Route, Routes, useLocation } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+import Document from \"./components/Document\";\n+\n+\n+function App() {\n+\n+  \n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    const location = useLocation();\n+    \n+    if(route === undefined) return null;\n+    if(route.path === location.pathname){\n+      \n+    }\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Document />\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702324550426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+import { Route, Routes, useLocation } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+import Document from \"./components/Document\";\n+import { useDocument } from \"./utils/hooks\";\n+\n+\n+function App() {\n+\n+  const {\n+    ChangeDocumentTitle\n+  } = useDocument();\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    const location = useLocation();\n+    \n+    if(route === undefined) return null;\n+    if(route.path === location.pathname){\n+      ChangeDocumentTitle(route.props.title, route.props.description)\n+    }\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Document />\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702324597916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+import { Route, Routes, useLocation } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+import Document from \"./components/Document\";\n+import { useDocument } from \"./utils/hooks\";\n+\n+\n+function App() {\n+\n+  const {\n+    ChangeDocumentTitle\n+  } = useDocument();\n+\n+  function GetRoutes(route:IRoute, index:number) {\n+    const location = useLocation();\n+    \n+    if(route === undefined) return null;\n+    if(route.path === location.pathname){\n+      console.log(route.props.title);\n+      \n+      ChangeDocumentTitle(route.props.title, route.props.description);\n+    }\n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Document />\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702325068900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+import { Route, Routes, useLocation } from \"react-router-dom\";\n+import routes, { IRoute } from \"./Routes\";\n+\n+\n+function App() {\n+\n+  function GetRoutes(route:IRoute, index:number) {    \n+    if(route === undefined) return null;\n+  \n+    return (\n+      <Route \n+          path={route.path} \n+          element={<route.element {...route.props} />} \n+          key={route.path + \"_\" + index.toString()}\n+          >\n+            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n+              return GetRoutes(route, _index);\n+            })}\n+      </Route>\n+    )\n+  }\n+ \n+  \n+  return (\n+    <>\n+    <Routes>\n+      {routes.map((route, index) => {\n+        return GetRoutes(route, index);\n+      })}\n+    </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702325465539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+import { Route, Routes, useLocation } from \"react-router-dom\";\n+import routes, { IRoute, RouteComponentProps } from \"./Routes\";\n+import React, { Suspense } from \"react\";\n+import NestedRoutes from \"./Routes\";\n+\n+\n+function App() {\n+\n+  const GetNestedAllRoutes = (route: RouteComponentProps) => {\n+    if (route === undefined) return null;\n+    let children = null;\n+\n+    if (route.childRoutes !== undefined) {\n+      children = route.childRoutes.map((subroute, _index) => (GetNestedAllRoutes(subroute)));\n+    }\n+\n+\n+    return (\n+      <Route\n+        key={window.location.pathname}\n+        path={route.path}\n+        element={route.component &&\n+          <>\n+            <Suspense fallback={<LazyLoadingNode />}>\n+              {React.createElement(route.component, {\n+                ...route.props\n+              }, children)}\n+            </Suspense>\n+          </>\n+        }\n+      >\n+        {children}\n+      </Route>\n+    )\n+  }\n+\n+\n+  return (\n+    <>\n+      <Routes>\n+        {NestedRoutes.map((route) => (\n+          GetNestedAllRoutes(route)\n+        ))}\n+      </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702325518451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+import React, { Suspense } from \"react\";\n+import { Route, Routes } from \"react-router-dom\";\n+import NestedRoutes, { RouteComponentProps } from \"./Routes\";\n+\n+\n+function App() {\n+\n+  const GetNestedAllRoutes = (route: RouteComponentProps) => {\n+    if (route === undefined) return null;\n+    let children = null;\n+\n+    if (route.childRoutes !== undefined) {\n+      children = route.childRoutes.map((subroute, _index) => (GetNestedAllRoutes(subroute)));\n+    }\n+\n+\n+    return (\n+      <Route\n+        key={window.location.pathname}\n+        path={route.path}\n+        element={route.component &&\n+          <>\n+            <Suspense fallback={<LazyLoadingNode />}>\n+              {React.createElement(route.component, {\n+                ...route.props\n+              }, children)}\n+            </Suspense>\n+          </>\n+        }\n+      >\n+        {children}\n+      </Route>\n+    )\n+  }\n+\n+\n+  return (\n+    <>\n+      <Routes>\n+        {NestedRoutes.map((route) => (\n+          GetNestedAllRoutes(route)\n+        ))}\n+      </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702325547844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+import React, { Suspense } from \"react\";\n+import { Route, Routes } from \"react-router-dom\";\n+import NestedRoutes, { RouteComponentProps } from \"./Routes\";\n+\n+\n+function App() {\n+\n+  const GetNestedAllRoutes = (route: RouteComponentProps) => {\n+    if (route === undefined) return null;\n+    let children = null;\n+\n+    if (route.childRoutes !== undefined) {\n+      children = route.childRoutes.map((subroute, _index) => (GetNestedAllRoutes(subroute)));\n+    }\n+    \n+    return (\n+      <Route\n+        key={window.location.pathname}\n+        path={route.path}\n+        element={route.component &&\n+          <>\n+            <Suspense fallback={<LazyLoadingNode />}>\n+              {React.createElement(route.component, {\n+                ...route.props\n+              }, children)}\n+            </Suspense>\n+          </>\n+        }\n+      >\n+        {children}\n+      </Route>\n+    )\n+  }\n+\n+\n+  return (\n+    <>\n+      <Routes>\n+        {NestedRoutes.map((route) => (\n+          GetNestedAllRoutes(route)\n+        ))}\n+      </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702325563645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+import React, { Suspense } from \"react\";\n+import { Route, Routes } from \"react-router-dom\";\n+import NestedRoutes, { RouteComponentProps } from \"./Routes\";\n+\n+\n+function App() {\n+\n+  const GetNestedAllRoutes = (route: RouteComponentProps) => {\n+    if (route === undefined) return null;\n+    let children = null;\n+\n+    if (route.childRoutes !== undefined) {\n+      children = route.childRoutes.map((subroute, _index) => (GetNestedAllRoutes(subroute)));\n+    }\n+\n+    return (\n+      <Route\n+        key={window.location.pathname}\n+        path={route.path}\n+        element={route.component &&\n+          <>\n+            <Suspense fallback={<LazyLoadingNode />}>\n+              {React.createElement(route.component, {\n+                ...route.props\n+              }, children)}\n+            </Suspense>\n+          </>\n+        }\n+      >\n+        {children}\n+      </Route>\n+    )\n+  }\n+\n+\n+  return (\n+    <>\n+      <Routes>\n+        {NestedRoutes.map((route) => (\n+          GetNestedAllRoutes(route)\n+        ))}\n+      </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702325589660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,47 @@\n+import React, { Suspense } from \"react\";\n+import { Route, Routes } from \"react-router-dom\";\n+import NestedRoutes, { RouteComponentProps } from \"./Routes\";\n+import LazyLoadingNode from \"./components/LazyLoadingNode\";\n+\n+function App() {\n+\n+  const GetNestedAllRoutes = (route: RouteComponentProps) => {\n+    if (route === undefined) return null;\n+    let children = null;\n+\n+    if (route.childRoutes !== undefined) {\n+      children = route.childRoutes.map((subroute, _index) => (GetNestedAllRoutes(subroute)));\n+    }\n+\n+    return (\n+      <Route\n+        key={window.location.pathname}\n+        path={route.path}\n+        element={route.component &&\n+          <>\n+            <Suspense fallback={<LazyLoadingNode />}>\n+              {React.createElement(route.component, {\n+                ...route.props\n+              }, children)}\n+            </Suspense>\n+          </>\n+        }\n+      >\n+        {children}\n+      </Route>\n+    )\n+  }\n+\n+\n+  return (\n+    <>\n+      <Routes>\n+        {NestedRoutes.map((route) => (\n+          GetNestedAllRoutes(route)\n+        ))}\n+      </Routes>\n+    </>\n+  )\n+}\n+\n+export default App\n"
                },
                {
                    "date": 1702325701834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,744 +44,4 @@\n   )\n }\n \n export default App\n-import React, { Suspense } from \"react\";\n-import { Route, Routes } from \"react-router-dom\";\n-import NestedRoutes, { RouteComponentProps } from \"./Routes\";\n-\n-\n-function App() {\n-\n-  const GetNestedAllRoutes = (route: RouteComponentProps) => {\n-    if (route === undefined) return null;\n-    let children = null;\n-\n-    if (route.childRoutes !== undefined) {\n-      children = route.childRoutes.map((subroute, _index) => (GetNestedAllRoutes(subroute)));\n-    }\n-\n-    return (\n-      <Route\n-        key={window.location.pathname}\n-        path={route.path}\n-        element={route.component &&\n-          <>\n-            <Suspense fallback={<LazyLoadingNode />}>\n-              {React.createElement(route.component, {\n-                ...route.props\n-              }, children)}\n-            </Suspense>\n-          </>\n-        }\n-      >\n-        {children}\n-      </Route>\n-    )\n-  }\n-\n-\n-  return (\n-    <>\n-      <Routes>\n-        {NestedRoutes.map((route) => (\n-          GetNestedAllRoutes(route)\n-        ))}\n-      </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import React, { Suspense } from \"react\";\n-import { Route, Routes } from \"react-router-dom\";\n-import NestedRoutes, { RouteComponentProps } from \"./Routes\";\n-\n-\n-function App() {\n-\n-  const GetNestedAllRoutes = (route: RouteComponentProps) => {\n-    if (route === undefined) return null;\n-    let children = null;\n-\n-    if (route.childRoutes !== undefined) {\n-      children = route.childRoutes.map((subroute, _index) => (GetNestedAllRoutes(subroute)));\n-    }\n-    \n-    return (\n-      <Route\n-        key={window.location.pathname}\n-        path={route.path}\n-        element={route.component &&\n-          <>\n-            <Suspense fallback={<LazyLoadingNode />}>\n-              {React.createElement(route.component, {\n-                ...route.props\n-              }, children)}\n-            </Suspense>\n-          </>\n-        }\n-      >\n-        {children}\n-      </Route>\n-    )\n-  }\n-\n-\n-  return (\n-    <>\n-      <Routes>\n-        {NestedRoutes.map((route) => (\n-          GetNestedAllRoutes(route)\n-        ))}\n-      </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import React, { Suspense } from \"react\";\n-import { Route, Routes } from \"react-router-dom\";\n-import NestedRoutes, { RouteComponentProps } from \"./Routes\";\n-\n-\n-function App() {\n-\n-  const GetNestedAllRoutes = (route: RouteComponentProps) => {\n-    if (route === undefined) return null;\n-    let children = null;\n-\n-    if (route.childRoutes !== undefined) {\n-      children = route.childRoutes.map((subroute, _index) => (GetNestedAllRoutes(subroute)));\n-    }\n-\n-\n-    return (\n-      <Route\n-        key={window.location.pathname}\n-        path={route.path}\n-        element={route.component &&\n-          <>\n-            <Suspense fallback={<LazyLoadingNode />}>\n-              {React.createElement(route.component, {\n-                ...route.props\n-              }, children)}\n-            </Suspense>\n-          </>\n-        }\n-      >\n-        {children}\n-      </Route>\n-    )\n-  }\n-\n-\n-  return (\n-    <>\n-      <Routes>\n-        {NestedRoutes.map((route) => (\n-          GetNestedAllRoutes(route)\n-        ))}\n-      </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes, useLocation } from \"react-router-dom\";\n-import routes, { IRoute, RouteComponentProps } from \"./Routes\";\n-import React, { Suspense } from \"react\";\n-import NestedRoutes from \"./Routes\";\n-\n-\n-function App() {\n-\n-  const GetNestedAllRoutes = (route: RouteComponentProps) => {\n-    if (route === undefined) return null;\n-    let children = null;\n-\n-    if (route.childRoutes !== undefined) {\n-      children = route.childRoutes.map((subroute, _index) => (GetNestedAllRoutes(subroute)));\n-    }\n-\n-\n-    return (\n-      <Route\n-        key={window.location.pathname}\n-        path={route.path}\n-        element={route.component &&\n-          <>\n-            <Suspense fallback={<LazyLoadingNode />}>\n-              {React.createElement(route.component, {\n-                ...route.props\n-              }, children)}\n-            </Suspense>\n-          </>\n-        }\n-      >\n-        {children}\n-      </Route>\n-    )\n-  }\n-\n-\n-  return (\n-    <>\n-      <Routes>\n-        {NestedRoutes.map((route) => (\n-          GetNestedAllRoutes(route)\n-        ))}\n-      </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes, useLocation } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-\n-\n-function App() {\n-\n-  function GetRoutes(route:IRoute, index:number) {    \n-    if(route === undefined) return null;\n-  \n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes, useLocation } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-import Document from \"./components/Document\";\n-import { useDocument } from \"./utils/hooks\";\n-\n-\n-function App() {\n-\n-  const {\n-    ChangeDocumentTitle\n-  } = useDocument();\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    const location = useLocation();\n-    \n-    if(route === undefined) return null;\n-    if(route.path === location.pathname){\n-      console.log(route.props.title);\n-      \n-      ChangeDocumentTitle(route.props.title, route.props.description);\n-    }\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Document />\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes, useLocation } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-import Document from \"./components/Document\";\n-import { useDocument } from \"./utils/hooks\";\n-\n-\n-function App() {\n-\n-  const {\n-    ChangeDocumentTitle\n-  } = useDocument();\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    const location = useLocation();\n-    \n-    if(route === undefined) return null;\n-    if(route.path === location.pathname){\n-      ChangeDocumentTitle(route.props.title, route.props.description)\n-    }\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Document />\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes, useLocation } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-import Document from \"./components/Document\";\n-\n-\n-function App() {\n-\n-  \n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    const location = useLocation();\n-    \n-    if(route === undefined) return null;\n-    if(route.path === location.pathname){\n-      \n-    }\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Document />\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes, useLocation } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-import Document from \"./components/Document\";\n-\n-\n-function App() {\n-\n-  \n-\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    const location = useLocation();\n-    \n-    if(route === undefined) return null;\n-    if(route.path === location.pathname){\n-      \n-    }\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Document />\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes, useLocation } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-import Document from \"./components/Document\";\n-\n-\n-function App() {\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    const location = useLocation();\n-    \n-    if(route === undefined) return null;\n-    if(route.path === location.pathname){\n-      \n-    }\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Document />\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes, useLocation } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-import Document from \"./components/Document\";\n-\n-\n-function App() {\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    const location = useLocation();\n-    \n-    if(route === undefined) return null;\n-    if(route.path === location.pathname){\n-      console.log(\"equal path: \" + route.path + \"_\" + location.pathname);\n-      \n-    }\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Document />\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes, useLocation } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-import Document from \"./components/Document\";\n-\n-\n-function App() {\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    const location = useLocation();\n-    \n-    if(route === undefined) return null;\n-    if(route.path === location.pathname){\n-      console.log(\"equal path\");\n-      \n-    }\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Document />\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-import Document from \"./components/Document\";\n-\n-\n-function App() {\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    if(route === undefined) return null;\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Document />\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-import Document from \"./components/Document\";\n-\n-\n-function App() {\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    if(route === undefined) return null;\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Document />\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Route, Routes } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-\n-\n-function App() {\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    if(route === undefined) return null;\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Routes, Route } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-\n-\n-function App() {\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    if(route === undefined) return null;\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element {...route.props} />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Routes, Route } from \"react-router-dom\";\n-import routes, { IRoute } from \"./Routes\";\n-\n-\n-function App() {\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    if(route === undefined) return null;\n-    return (\n-      <Route \n-          path={route.path} \n-          element={<route.element  />} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n-import { Routes, Route } from \"react-router-dom\";\n-\n-\n-\n-function App() {\n-\n-  function GetRoutes(route:IRoute, index:number) {\n-    if(route === undefined) return null;\n-    return (\n-      <Route \n-          path={route.path} \n-          element={route.element} \n-          key={route.path + \"_\" + index.toString()}\n-          >\n-            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n-              return GetRoutes(route, _index);\n-            })}\n-      </Route>\n-    )\n-  }\n- \n-  \n-  return (\n-    <>\n-    <Routes>\n-      {routes.map((route, index) => {\n-        return GetRoutes(route, index);\n-      })}\n-    </Routes>\n-    </>\n-  )\n-}\n-\n-export default App\n"
                }
            ],
            "date": 1702322894467,
            "name": "Commit-0",
            "content": "import { Routes, Route } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  function GetRoutes(route:IRoute, index:number) {\n    if(route === undefined) return null;\n    return (\n      <Route \n          path={route.path} \n          element={route.element} \n          key={route.path + \"_\" + index.toString()}\n          >\n            {route.childRoutes !== undefined && route.childRoutes.map((route, _index) => {\n              return GetRoutes(route, _index);\n            })}\n      </Route>\n    )\n  }\n \n  \n  return (\n    <>\n    <Routes>\n      {routes.map((route, index) => {\n        return GetRoutes(route, index);\n      })}\n    </Routes>\n    </>\n  )\n}\n\nexport default App\n"
        }
    ]
}